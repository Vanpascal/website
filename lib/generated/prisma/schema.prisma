generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model announcements {
  id        Int      @id @default(autoincrement())
  title     String
  link      String?
  createdAt DateTime @default(now())
  views     Int      @default(0)
}

model banners {
  id        Int      @id @default(autoincrement())
  title     String
  link      String?
  createdAt DateTime @default(now())
}

model comments {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  author     String
  photo      String?
  createdAt  DateTime @default(now())
  whoComment String
}

model courses {
  id          Int      @id @default(autoincrement())
  coursename  String
  duration    String   @db.VarChar(11)
  courseType  String
  description String   @db.Text
  photo       String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
}

model documents {
  id        Int      @id @default(autoincrement())
  title     String
  link      String
  views     Int      @default(0)
  createdAt DateTime @default(now())
}

model employees {
  id         Int      @id @default(autoincrement())
  firstname  String
  lastname   String
  email      String   @unique(map: "Staff_email_key")
  phone      String
  category   String
  position   String?  @default("staff")
  photo      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  department String?
}

model products {
  id           Int    @id @default(autoincrement())
  product_name String @db.VarChar(50)
  department   String @db.VarChar(50)
  price        String @db.VarChar(20)
  photo        String
}

model recentupdates {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?  @db.Text
  photo     String?
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  slug      String   @unique
}

model users {
  id        Int    @id @default(autoincrement())
  firstname String
  lastname  String
  email     String @unique(map: "Users_email_key")
  phone     String @db.VarChar(15)
  password  String
}

model visitor {
  id         Int      @id @default(autoincrement())
  ipAddress  String   @unique
  userAgent  String?
  visitCount Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model payments {
  id        Int      @id @default(autoincrement())
  method    String // "mobile" or "bank"
  amount    Float
  purpose   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations: one payment can have one mobile or one bank payment detail
  mobilePayment mobilePayments? @relation("PaymentToMobilePayment")
  bankPayment   bankPayments?   @relation("PaymentToBankPayment")
}

model mobilePayments {
  id          Int      @id @default(autoincrement())
  provider    String // e.g., "airtel-money"
  phone       String // e.g., "2557XXXXXXXX"
  localTxnId  String // your internal txn UUID
  airtelTxnId String? // Airtel's transaction ID, optional at first
  status      String   @default("PENDING") // e.g. "SUCCESS", "FAILED"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  paymentId Int      @unique
  payment   payments @relation("PaymentToMobilePayment", fields: [paymentId], references: [id], onDelete: Cascade)
}

model bankPayments {
  id          Int      @id @default(autoincrement())
  bankName    String
  accountName String
  accountNo   String
  reference   String?
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  paymentId Int      @unique
  payment   payments @relation("PaymentToBankPayment", fields: [paymentId], references: [id], onDelete: Cascade)
}
